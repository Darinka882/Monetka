import logging
import gspread
import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import BotCommand
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from oauth2client.service_account import ServiceAccountCredentials
from aiohttp import web

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDS")
creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="total", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="debug", description="–û—Ç–ª–∞–¥–∫–∞"),
    ]
    await bot.set_my_commands(commands)

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 500 –ï–¥–∞")

@router.message(Command("total"))
async def cmd_total(message: types.Message):
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        records = sheet.get_all_values()
        header = records[0]

        if "–î–∞—Ç–∞" not in header or "–°—É–º–º–∞" not in header:
            await message.answer("–û—à–∏–±–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–î–∞—Ç–∞' –∏–ª–∏ '–°—É–º–º–∞'.")
            return
        
        date_col = header.index("–î–∞—Ç–∞")
        amount_col = header.index("–°—É–º–º–∞")

        total = sum(
            int(row[amount_col])
            for row in records[1:]
            if len(row) > max(date_col, amount_col) and row[date_col] == today
        )

        await message.answer(f"üí∞ –ò—Ç–æ–≥ –∑–∞ {today}: {total} —Ä—É–±.")
    except Exception as e:
        logging.error(e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—É–º–º—ã.")

@router.message(Command("debug"))
async def cmd_debug(message: types.Message):
    try:
        records = sheet.get_all_values()
        await message.answer(f"üîç –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:\n{records}")
    except Exception as e:
        logging.error(e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.")

@router.message()
async def add_expense(message: types.Message):
    try:
        data = message.text.split(" ", 1)
        amount = int(data[0])
        category = data[1] if len(data) > 1 else "–ü—Ä–æ—á–µ–µ"
        date = datetime.now().strftime("%Y-%m-%d")

        sheet.append_row([date, amount, category])
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} —Ä—É–±. –Ω–∞ {category} ({date})")
    except Exception as e:
        logging.error(e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –£–±–µ–¥–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 500 –ï–¥–∞")

dp.include_router(router)

async def on_startup(bot: Bot):
    await set_commands(bot)

async def main():
    app = web.Application()
    dp.startup.register(on_startup)

    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET)
    webhook_handler.register(app, path=f"/webhook/{WEBHOOK_SECRET}")
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    import asyncio
    import uvloop
    uvloop.install()
    asyncio.run(main())
