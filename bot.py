import os
import json
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from aiohttp import web
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, BotCommand
from aiogram.filters import Command

# ================= –ù–ê–°–¢–†–û–ô–ö–ê =================
TOKEN = os.getenv("TOKEN")
SPREADSHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS = json.loads(os.getenv("GOOGLE_CREDS"))
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
PORT = int(os.getenv("PORT", 8080))

# ================= GOOGLE SHEETS =================
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDS, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# ================= –õ–û–ì–ò =================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ================= –ë–û–¢ =================
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ================= –ö–û–ú–ê–ù–î–´ =================
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="total", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="debug", description="–û—Ç–ª–∞–¥–∫–∞"),
    ]
    await bot.set_my_commands(commands)

# ================= –•–ï–ù–î–õ–ï–†–´ =================
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 500 –ï–¥–∞")

@router.message(Command("total"))
async def cmd_total(message: Message):
    today = datetime.now().strftime("%Y-%m-%d")
    records = sheet.get_all_values()
    header = records[0]
    if "–î–∞—Ç–∞" not in header or "–°—É–º–º–∞" not in header:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–î–∞—Ç–∞' –∏–ª–∏ '–°—É–º–º–∞'")
        return
    date_col = header.index("–î–∞—Ç–∞") + 1
    amount_col = header.index("–°—É–º–º–∞") + 1
    total = sum(int(row[amount_col - 1]) for row in records[1:] if row[date_col - 1] == today)
    await message.answer(f"üí∞ –ò—Ç–æ–≥ –∑–∞ {today}: {total} —Ä—É–±.")

@router.message(Command("debug"))
async def cmd_debug(message: Message):
    records = sheet.get_all_values()
    await message.answer(f"üîç –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:\n{records if records else '–ø—É—Å—Ç–æ'}")

@router.message()
async def add_expense(message: Message):
    try:
        amount, category = message.text.split(" ", 1)
        amount = int(amount)
        date = datetime.now().strftime("%Y-%m-%d")
        sheet.append_row([date, amount, category])
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} —Ä—É–±. –Ω–∞ {category} ({date})")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 500 –ï–¥–∞")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")

# ================= –í–ï–ë–•–£–ö =================
async def telegram_webhook(request: web.Request):
    try:
        data = await request.json()
        logger.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∞–ø–¥–µ–π—Ç: {data}")

        if data.get("ping") == "true":
            return web.json_response({"status": "ok", "message": "pong"})

        await dp.feed_raw_update(bot=bot, update=data)
        return web.Response(text="ok")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ webhook")
        return web.Response(status=500, text="webhook error")

# ================= –°–ï–†–í–ï–† =================
app = web.Application()
app.router.add_post(f"/webhook/{WEBHOOK_SECRET}", telegram_webhook)
app.router.add_get("/", lambda r: web.Response(text="pong"))

app.on_startup.append(lambda app: set_commands(bot))
app.on_shutdown.append(lambda app: bot.session.close())

# ================= –ó–ê–ü–£–°–ö =================
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
