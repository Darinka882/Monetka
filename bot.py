import logging
import gspread
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, BotCommand
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN")
SPREADSHEET_ID = os.getenv("GOOGLE_SHEET_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
BASE_WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook/{WEBHOOK_SECRET}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDS")
creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# Bot init
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="total", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="debug", description="–û—Ç–ª–∞–¥–∫–∞"),
    ]
    await bot.set_my_commands(commands)

@router.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 500 –ï–¥–∞")

@router.message(Command("total"))
async def get_total(message: Message):
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        records = sheet.get_all_values()
        header = records[0]
        if "–î–∞—Ç–∞" not in header or "–°—É–º–º–∞" not in header:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–î–∞—Ç–∞' –∏–ª–∏ '–°—É–º–º–∞'.")
            return
        date_col = header.index("–î–∞—Ç–∞") + 1
        amount_col = header.index("–°—É–º–º–∞") + 1
        total_col = header.index("–ò—Ç–æ–≥") + 1 if "–ò—Ç–æ–≥" in header else None
        total = sum(int(row[amount_col - 1]) for row in records[1:] if row[date_col - 1] == today)
        if total_col:
            sheet.update_cell(len(records) + 1, total_col, total)
        await message.answer(f"üí∞ –ò—Ç–æ–≥ –∑–∞ {today}: {total} —Ä—É–±.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ.")
        logging.error(e)

@router.message(Command("debug"))
async def debug(message: Message):
    try:
        records = sheet.get_all_values()
        if not records:
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è.")
            return
        await message.answer(f"üîç –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:\n{records}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏.")
        logging.error(e)

@router.message()
async def add_expense(message: Message):
    try:
        data = message.text.split(" ", 1)
        amount = int(data[0])
        category = data[1] if len(data) > 1 else "–ü—Ä–æ—á–µ–µ"
        date = datetime.now().strftime("%Y-%m-%d")
        sheet.append_row([date, amount, category])
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} —Ä—É–±. –Ω–∞ {category} ({date})")
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç: 500 –ï–¥–∞")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏.")
        logging.error(e)

dp.include_router(router)

# aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app = web.Application()
dp.startup.register(set_commands)
dp.startup.register(lambda _: bot.set_webhook(BASE_WEBHOOK_URL, secret_token=WEBHOOK_SECRET))
app.router.add_route("*", f"/webhook/{WEBHOOK_SECRET}", dp.webhook_request_handler())
