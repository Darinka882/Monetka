import os
import json
import logging
import gspread
from datetime import datetime
from aiohttp import web
from aiohttp.web_request import Request
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, BotCommand, Update
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
SPREADSHEET_ID = os.getenv("GOOGLE_SHEET_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
GOOGLE_CREDS = os.getenv("GOOGLE_CREDS")

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(GOOGLE_CREDS)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def set_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="total", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="debug", description="–û—Ç–ª–∞–¥–∫–∞"),
    ])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@router.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 500 –ï–¥–∞")

@router.message(Command("total"))
async def get_total(message: Message):
    today = datetime.now().strftime("%Y-%m-%d")
    records = sheet.get_all_values()
    header = records[0]

    if "–î–∞—Ç–∞" not in header or "–°—É–º–º–∞" not in header:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–î–∞—Ç–∞' –∏–ª–∏ '–°—É–º–º–∞'")
        return

    date_col = header.index("–î–∞—Ç–∞") + 1
    amount_col = header.index("–°—É–º–º–∞") + 1
    total = sum(int(row[amount_col - 1]) for row in records[1:] if row[date_col - 1] == today)

    await message.answer(f"üí∞ –ò—Ç–æ–≥ –∑–∞ {today}: {total} —Ä—É–±.")

@router.message(Command("debug"))
async def debug(message: Message):
    records = sheet.get_all_values()
    await message.answer(f"üîç –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:\n{records if records else '–ø—É—Å—Ç–æ'}")

@router.message()
async def add_expense(message: Message):
    try:
        data = message.text.split(" ", 1)
        amount = int(data[0])
        category = data[1] if len(data) > 1 else "–ü—Ä–æ—á–µ–µ"
        date = datetime.now().strftime("%Y-%m-%d")
        sheet.append_row([date, amount, category])
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} —Ä—É–±. –Ω–∞ {category} ({date})")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 500 –ï–¥–∞")
    except Exception as e:
        logging.exception(e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")

# --- aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = web.Application()

# –†–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Render'–æ–º (GET /)
async def healthcheck(_: Request):
    return web.Response(text="ok")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (POST /webhook/...)
async def telegram_webhook(request: Request):
    try:
        if request.query.get("ping") == "true":
            return web.json_response({"status": "ok", "message": "pong"})

        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:")
        return web.Response(status=500, text="Internal Server Error")

# –†–æ—É—Ç—ã
app.router.add_get("/", healthcheck)
app.router.add_post(f"/webhook/{WEBHOOK_SECRET}", telegram_webhook)

# –•—É–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
app.on_startup.append(lambda _: bot.delete_webhook(drop_pending_updates=True))
app.on_startup.append(lambda _: set_commands(bot))
app.on_shutdown.append(lambda _: bot.session.close())

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
