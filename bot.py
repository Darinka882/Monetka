import logging
import gspread
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, BotCommand
from aiogram.enums import ParseMode
from aiogram.filters import Command
import asyncio
from aiogram.client.default import DefaultBotProperties
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "7584649281:AAFa5ydURl_MLA6zNO-Q4ObH_vG3FXJDcsk"
SPREADSHEET_ID = "1EhlhX89B36F4cdTORWKkLteH-IFQncinlhFGYnepQQw"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é –≤ Telegram"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="total", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å"),
        BotCommand(command="debug", description="–û—Ç–ª–∞–¥–∫–∞"),
    ]
    await bot.set_my_commands(commands)

@router.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 500 –ï–¥–∞")

@router.message(Command("total"))
async def get_total(message: Message):
    """–ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–ø–∏—Å—å –∏—Ç–æ–≥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        records = sheet.get_all_values()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        header = records[0]  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if "–î–∞—Ç–∞" not in header or "–°—É–º–º–∞" not in header:
            await message.answer("–û—à–∏–±–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–î–∞—Ç–∞' –∏–ª–∏ '–°—É–º–º–∞'.")
            return
        
        date_col = header.index("–î–∞—Ç–∞") + 1
        amount_col = header.index("–°—É–º–º–∞") + 1
        total_col = header.index("–ò—Ç–æ–≥") + 1 if "–ò—Ç–æ–≥" in header else None

        total = sum(int(row[amount_col - 1]) for row in records[1:] if row[date_col - 1] == today)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥ –≤ —Ç–∞–±–ª–∏—Ü—É
        if total_col:
            sheet.update_cell(len(records) + 1, total_col, total)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É

        await message.answer(f"üí∞ –ò—Ç–æ–≥ –∑–∞ {today}: {total} —Ä—É–±.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—É–º–º—ã.")
        logging.error(e)

@router.message(Command("debug"))
async def debug(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        records = sheet.get_all_values()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        if not records:
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è.")
            return
        await message.answer(f"üîç –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:\n{records}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.")
        logging.error(e)

@router.message()
async def add_expense(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        data = message.text.split(" ", 1)
        amount = int(data[0])  # –°—É–º–º–∞
        category = data[1] if len(data) > 1 else "–ü—Ä–æ—á–µ–µ"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        date = datetime.now().strftime("%Y-%m-%d")  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

        sheet.append_row([date, amount, category])  # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} —Ä—É–±. –Ω–∞ {category} ({date})")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 500 –ï–¥–∞")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏.")
        logging.error(e)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await set_commands(bot)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())